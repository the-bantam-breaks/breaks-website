AWSTemplateFormatVersion: '2010-09-09'
Description: The Bantam Breaks site

Parameters:
  Lifecycle:
    Description: dev or prod
    Type: String

  VpcId:
    Description: ID of VPC
    Type: AWS::EC2::VPC::Id
    Default: vpc-00fb6a970908dbccc

  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-061440f11d3652bf1

  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-049c13661f6dbb09f

  ListenerPort:
    Type: Number
    Default: 443

  ContainerPort:
    Type: Number
    Default: 8080

  ContainerProtocol:
    Type: String
    Default: HTTP

Resources:
# ACM cert
# DNS?
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${Lifecycle} load balancer SG"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: LoadBalancerSecurityGroup
    Properties:
      Type: application
      Name: !Sub "${Lifecycle}-alb"
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref ListenerPort
      Protocol: !Ref ContainerProtocol
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: 'forward'

# target group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${Lifecycle}"
      Port: !Ref ContainerPort
      Protocol: !Ref ContainerProtocol
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckProtocol: !Ref ContainerProtocol
      HealthCheckPort: !Ref ContainerPort
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 20

# ECS IAM
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Lifecycle}-ecs-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        # TODO: break these down in to multiple policies and protect
        #       production secrets using ARN patterns.
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'

                  # Rules which allow ECS to update load balancers on your behalf
                  # with the information sabout how to send traffic to your containers
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'

                  # Support "secrets" section of the task definition
                  - 'ssm:GetParameters'
                  - 'ssm:GetParameter'
                  - 'secretsmanager:GetSecretValue'
                  - 'kms:Decrypt'
                Resource: '*'

# EC2 IAM/instance profile
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ecs:CreateCluster'
              - 'ecs:DeregisterContainerInstance'
              - 'ecs:DiscoverPollEndpoint'
              - 'ecs:Poll'
              - 'ecs:RegisterContainerInstance'
              - 'ecs:StartTelemetrySession'
              - 'ecs:Submit*'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'
            Resource: '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']

# ECS sec group
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: LoadBalancerSecurityGroup
    Properties:
      GroupDescription: website container traffic
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

# EC2 sec group
# postgres sec group

# ecs cluster

# ec2 instances
## LaunchConfiguration
## AutoScaleGroup

# task definition
# ecs service
# postgres db?
## postgres as container?
